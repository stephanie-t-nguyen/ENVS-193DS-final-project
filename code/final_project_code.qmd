---
title: "Final Project Code"
author: "Kyle Cahitas, Stephanie Nguyen, William Yip"
date: "June 9, 2023"
format:
  html:
    toc: true
    toc-location: left
    code-fold: true
    theme: yeti
editor: visual
execute:
  message: false
  warning: false
bibliography: references.bib
---

# Introduction #1

Kangaroo rats build mounds that create micro-environments and foster more plant diversity than adjacent grassland [@guo1996]. Even within the same mound, there are different microhabitats depending on distance away from the mound [@koontz2010]. Using data from "Effects of Kangaroo Rat Mounds," our study investigates how total seed number differs between kangaroo rat mound locations (base of the mound, surrounding areas, edge of mound, and interspace between mound and grassland) [@koontz2013].

Our null hypothesis states that there is no difference in number of seeds between the different kangaroo rat mound locations, meaning that the mounds likely do not create or foster more plant diversity. Our alternative hypothesis states that some locations of the mound support more seeds than others, meaning that the microhabitats created by the mounds likely foster more plant diversity than regular grassland soil.

### Set Up

```{r}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

```{r, include = FALSE}
library(here)
library(naniar)
library(tidyverse)
library(GGally)
library(tidyr)
library(corrplot)
library(skimr)
library(stringr)
library(effsize)
library(rstatix)
library(flextable)
library(performance)
library(base)
```

```{r}
#Load in Problem 1 data
kangaroo_rat <- here("data", "sev208_kratseedbank_20120213.txt") |> #File path
  read.csv(header= TRUE, sep =",", quote = "") |> #Has header, delimiter is comma, no quoting
  mutate(loc = str_replace_all(loc, c("B" = "Base", #Replace code names with actual names
                                      "D" = "Surrounding",
                                      "E" = "Edge",
                                      "I" = "Interspace"))) |> 
  mutate(seeds = as.numeric(seeds)) #Make sure data is numeric
  
```

# Methods #1

Koontz et al. randomly chose 10 out of 25 active kangaroo rat mounds to survey. The mound soil was then divided into four groups in increasing distance from the center of the mound: base, surrounding, edge, and interspace [@koontz2010]. The soil from each location was sieved for seeds, counted, and recorded into a dataframe called kangaroo_rat [@koontz2010]. Refer to the data dictionary at the bottom of the page for explanations of column names. 

The dataframe was checked for missing data, but no data was missing (Figure 1). Then, the data was grouped by location to get the total, rather than individual, seed counts of each mound location in the dataframe kangaroo_rat_subset. The data also contained irrelevant rows with information on physical descriptors of the mound, which was filtered out [@koontz2010]. This is the dataframe we used going forward with the analysis. 

An exploratory data visualization was created plotting the total seeds at each of the four mound locations (Figure 2). At a glance, it appears that soils closer to the mound base have more seeds. To further investigate the data was visually (Figure 3) and statistically checked for homoscedasticity and normality. According to these checks, the data was both heteroscedastic and non-normal, meaning a non-parametric model must be used. 

Thus, a Kruskel-Wallis test was run. The Kruskel-Wallis test is a non-parametric test to compare the ranks of three or more indepndent groups [@mckight2010]. It is best used for categorical predictor variables, and data sets of at least 5 per group, and our data meets all of these assumptions. The calculated p-value of the test was very small (\<0.0001), which means that the difference in seed count between locations is significant (Figure 4) [@https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/kruskal.test].

Afterwards, the Kruskel effect size was calculated to be 0.442 (Figure 5). This is a large magnitude, meaning that the differences in total seeds between different locations is big and distinct; there is little overlap between the data from different locations.

```{r}
#Missing data check
gg_miss_var(kangaroo_rat) #No data missing
```

**Figure 1.** Visualization of Missing Data in "kangaroo_rat" Dataframe

The y-axis are the variables (columns in the dataframe and the x-axis marks how many rows have missing data per variable.

```{r}
kangaroo_rat_subset <- kangaroo_rat |> 
  filter(!grepl("soil|gravel|dist|litter|plant", species)) |>  #Filter out irrevelant columns (physical descriptors)
  group_by(mnd, dir, loc) |> #Group to get total seeds per mound location
  summarize(total_seeds = sum(seeds)) |>
  ungroup()
```

```{r}
#Exploratory data visualization, looks like locations closet to mound have most seeds, but we should further explore
ggplot() + 
  geom_boxplot(data = kangaroo_rat_subset, aes(x = loc, y = total_seeds, color = loc)) +
  geom_jitter(data = kangaroo_rat_subset, aes(x = loc, y = total_seeds, color = loc), alpha = 0.4) + #Create jitter plot of seed count observations 
  theme_bw() + #Set theme
  theme(legend.position = "none") + #Omit legend
  labs(x = "Mound Location", #Label axes
       y = "Number of Seeds") + 
  scale_x_discrete(limits = c("Base", "Surrounding", "Edge", "Interspace")) #Reorder locations from closet to furthest
  
```

**Figure 2.** Exploratory Data Visualization of Seeds vs Mound Location

This figure plots observations of the number of seeds found at each mound location. The locations are in order from closet to furthest from the mound, from the base of the mound to the interspace adjacent to the grassland.

```{r}
#Create model to further explore relationship
modelobject <- lm(total_seeds ~ loc, data = kangaroo_rat_subset)

#Visualize models - diagnostic plots in a grid 
par(mfrow = c(2, 2))
plot(modelobject) #Data is not normal 
```

**Figure 3.** Diagnostic Plots for Kangaroo Rat Data

The Residual vs Fitted plot checks for constant variance (homoscedasticity) among the residuals. The Scale-Location plot also checks for homoscedasticity, but using the square root of the residuals; both plots show a change in pattern, where points decrease in density from bottom to top, suggesting heteroscedasticity. The Normal Q-Q plot suggests non-normality because of the deviation from the dotted line at the right tail end of the data. The Constant Leverage plot shows outliers in the data, but there do not appear to be any.

```{r}
#Statistical checks
kr_model <- lm(total_seeds ~ loc, data = kangaroo_rat_subset)
check_normality(kr_model) #The data is not normal
check_heteroscedasticity(kr_model) #The data is heteroscedastic
```

```{r}
#Run Kruskel Test
kruskal_results <- kruskal.test(total_seeds ~ loc, data = kangaroo_rat_subset) |> #Run test
  tidy() |> #Make into dataframe
  mutate(p.value = case_when(p.value < 0.0001 ~ "<0.0001")) |> #Replace p-value
  flextable() |> #Make into a flextable
  set_header_labels(statistic = "Statistic", #Change header labels to be meaningful 
                    p.value = "p-value", 
                    parameter = "Parameter",
                    method = "Method")
kruskal_results 
```

**Figure 4.** Results Kruskel Wallis Test

The table shows the results of the Kruskel Wallis test. Note the p-value was changed from its actual value to a range to avoid a cutoff in numbers.

```{r}
#Post-hoc tests to see how and which ranks differ
rstatix::kruskal_effsize(total_seeds ~ loc, data = kangaroo_rat_subset, conf.level = 0.95) |> 
  flextable() |> #Make data frame into a flex table object
  set_header_labels(.y. = "Dependent Variable", #Change header labels to be meaningful 
                    n = "Number of Observations", 
                    effsize = "Effect Size",
                    method = "Method",
                    magnitude = "Magnitude")

#Magnitude is very big, so the difference between seed number at different locations is significant and big
```

**Figure 5.** Effect Size of Kruskel Wallis Test

The table shows the results of calculating the effect size of the Kruskel Wallis Test.

# Results #1

The data was statistically and visually checked; it was non-normal, heteroscedastic, and categorical, so the Kruskel Wallis test was determined to be the most suitable test to run. The Kruskel test calculated a chi-squared value of 54.269, degrees of freedom of 3, and a p-value of 9.83e-12 assuming a confidence level of 0.95 (Figure 4). The Kruskel test determines distinct each mound location (base, surroundings, edge, and interspace) is from each other. The extremely small p-value indicates that there is strong evidence to suggest rejecting the null hypothesis and supporting the alternative hypothesis: some mound locations have more total seeds than others. To check in which direction mound locations have more seeds than others, a visualization was made (Figure 6). Figure 6 shows a correlation between increasing proximity to the mound and a greater number of seeds.

To further check the significance of the Kruskel test, the effect size was calculated to be 0.44 (Figure 5). This is a large effect size, meaning that the differences in seeds between locations is not only significant but also big in magnitude.

Biologically, this suggests that microhabitats are created by kangaroo rat mounds that are different from adjacent grassland. Furthermore, even within each mound, depending on distance away from the mound, there are different and distinct microhabitats. Soil closer to the mound tend to foster more seeds by a large magnitude.

```{r}
#Create summary statistics table for kangaroo_rat
kangaroo_rat_summary <- kangaroo_rat_subset |> 
  group_by(loc) |> #Group by location 
  summarize(mean_1 = mean(total_seeds), #Summarize mean, sd, var, and margin of error
        	sd_1 = sd(total_seeds),
        	var_1  = var(total_seeds),
        	count_1  = length(total_seeds),
        	se_1 = sd_1/sqrt(count_1),
        	margin_1 = qt(0.95, df = count_1 - 1) * se_1)

#Create ggplot of main results
ggplot(data = kangaroo_rat_summary, aes(x = loc, y = mean_1, color = loc)) +
  geom_point(size = 3) +
  geom_linerange(aes(ymin = mean_1 - margin_1, ymax = mean_1 + margin_1),
             	linewidth = 1) +
  geom_jitter(data = kangaroo_rat_subset, aes(x = loc, y = total_seeds), alpha = 0.3) +
  theme_bw() +
  theme(legend.position = "none",
    	axis.title = element_text(size = 14),
    	axis.text = element_text(size = 12)) +
  labs(x = "Mound Location", y = "Total Number of Seeds") +
  scale_x_discrete(limits = c("Base", "Surrounding", "Edge", "Interspace")) +
  ylim(0, 400)
```

**Figure 6.** Mound Location in Correlation with Total Number of Seeds

The plot shows locations of the mound from closest to furthest from the mound, versus total number of seeds. The bigger dot represents the mean of total seeds per location and the bars represent the margin of error with a 95% confidence interval. Note that 6 data points are not shown because of y-axis limit for aesthetic reasons.

# Introduction Problem #2

The Niwot Ridge is an alpine ecosystem that consists of cold, snowy, and windy climates and low temperatures during the growing season [@edwards2007]. Despite these conditions, many plants have adapted to this environment. Learning more about these plants can better inform us of plants that live in their climate limits [@germino2014]. Seed count is the number of seeds produced by a plant that is commonly used to determine the plant's fitness [@wen2020]. Plants have numerous biological and physical factors that can contribute to their seed count. Using data from "Individual and community flowering phenology, seed counts and pollinator visitation rates in shrub and open plots across Niwot Ridge, 2019 - 2021", we will investigate how the seed count of plants in the Niwot Ridge varies with total number of inflorescences, plant species, and plot type [@seaver2022a]. We hypothesize that plant species and number of inflorescences will be the biggest factors in determining seed count.

# Methods Problem #2

There were four datasets the study that they came from, but we only used one of them called seed count weight. We did this because seed count weight contained all of the variables that we were using to compare seed count such as total number of inflorescence, plant species, and plot type. Seaver counted the number of seeds by breaking up dried buds with her fingers and counting all the viable seeds. A seed was "viable" if it had a plump look and feel compared to an aborted seed that was clearly shriveled and small. The seeds were collected from five different species: Geuros, Kobmyo, Carrup, Arefen, and Minobt. Viable seeds were recorded and put into envelopes that had their respective species, plot number, and number of inflorescences collected [@seaver2022].

To get a better understanding of the dataset, we ran a series of tests and created visualizations that helped us understand the relationship between variables. As shown in figure 1, there are variables in the dataset that have missing data. However, the number of missing data is not too significant and we still have a large number of observations to work with. We still subsetted the data to drop the missing data. As shown in figure 2, we used the ggpairs function to create plots that we can use to visually assessed the relationships between variables. We found that the number of influoresences and seed count had a strong Pearson's correlation, but there seemed to be no relationship between variables based on visual assessment of the scatter plot and bar graphs. As shown in figure 3, we calculated Pearson's correlation to determine the relationships between numerical values of number of inflorescence and total seed count. We found that there was a strong correlation between number of inflorescnece and total seed count. The Pearson's correlation was a 0.93 which is a considered a strong correlation.

In order for us to determine how seed count varies with plot type, plant species, and total number of inflorescences, we created three models that each had different methods for looking at how the variables effected one another in the model. As shown in figure 4, we visually assessed the normality and homoskestacitiy of residuals using a series of diagnostic plot for the models. We found that the visual assumption check of the plots show that the model do not conform to linearity or normality. Therefore, we did not use linear regression models because the models did not conform to the assumptions of linear regression. Instead, we used generalized linear models with a negative binomial distribution which is why we decided that the model seedctwt3 is the best and most simple model. This is because when we did a summary of the model we used shrub plot to compare against the control (open plot) and found that open plot had higher seed counts than shrub plot. This showed us that there was a still a pattern between these two variables. We also used the MuMin function to determine which model had the lowest AIC score. We found that model seedctwt3 had the lowest AIC score which meant it was best model to use.

```{r, libraries, include = FALSE}
# model packages
library(here)
library(MASS) # have to read this in before tidyverse 
library(lme4)
library(glmmTMB) # ok if you don't have this - just comment it out

# diagnostics and model info
library(DHARMa)
library(MuMIn)
library(ggeffects)
library(lmtest)
library(broom)
#
library(naniar)
library(tidyverse)
library(GGally)
library(tidyr)
library(corrplot)
library(dplyr)
library(janitor)
library(ggplot2)
library(flextable)
library(dplyr)
```

### Code #2

```{r}
#Load in Problem 2 data
pollinator <- here("data", "shrubstudy_pollinator.ms.data.csv") |> 
  read.csv()

seed_ctwt <- here("data", "shrubstudy_seed_ctwt.ms.data.csv") |> 
  read.csv()

individual_flower <- here("data", "shrubstudy_individual_flower_counts.ms.data.csv") |> 
  read.csv()

community_flower <- here("data", "shrubstudy_community_flower_counts.ms.data.csv") |> 
  read.csv()
```

```{r}
gg_miss_var(seed_ctwt) #Most of dist_fr_shr, wt_seeds_mg, nr_seeds missing
```

**Figure 1.** Visualization of missing observations in seed dataset

Variables are shown on the y-axis and the number of data missing is shown on the x-axis. The lines and dots represent how many missing observations are in each variable.

```{r, include = FALSE}
colnames(seed_ctwt)
```

```{r}
#selecting certain columns to answer question
seed_ctwt_subset <- dplyr::select(seed_ctwt,"treatment", "species", "total_nr_infl", "nr_seeds") %>%  
  drop_na(nr_seeds) #dropping Na values
```

```{r}
#ggapairs plot for predictor variables
ggpairs(seed_ctwt_subset)
```

**Figure 2.** Relationship between variables.

Displays Pearson's correlations, bar graph, and boxplots. The asterisks indicate statistically significant relationships between variables. The bar plot at the top left shows the frequency of each treatment and the boxplot along the top line shows the quantitative variable compared with the categorical variable treatment and species.

```{r}
#Calculate Pearson's r for numerical values only 
seed_cor <- seed_ctwt_subset |> 
  dplyr::select(total_nr_infl:nr_seeds) |> #Not sure if this is correct
  cor(method = "pearson")

#Create correlation plot
corrplot(seed_cor, 
         method = "ellipse", #Change shape of item in cells
         addCoef.col = "black") #Add coefficient in black text
```

**Figure 3.** Pearson's Correlation

The scale on the right indicates the strength of correlation and each cell has color shading to indicate the strength of correlation. Blue represents a positive correlation and red represents a negative correlation. The diagonals represent the correlation between the same variables.

```{r}
#Create a null and a full model - fit multiple linear models in order to see which one is best
null <- lm(nr_seeds ~ 1, data = seed_ctwt_subset)
#Assume no relationship between total mass and predictor variables 
#1 indicates absence of all other predictors 

full <- lm(nr_seeds ~ treatment + species + total_nr_infl, data = seed_ctwt_subset)
#Assume predictor variables can predict biomass
```

```{r}
#Exploratory data visualization
par(mfrow = c(2, 2))
plot(full) #DATA IS NOT NORMAL CANNOT DO MULTIPLE LINEAR REGRESSION 
```

**Figure 4.** Assumption checks for the full model

Four plots used to determine the normality of full mode. Residual vs Fitted show residuals on y-axis and fitted values on x-axis. Used to indicate linear relationship. Normal Q-Q plot had standardized residuals on the y-axis and theoretical quantities on the x-axis. Used to determine normality of residuals. Scale-location shows the square root of standardized residuals on the y-axis and fitted values on the x-axis. Used to look at homogeneity of variance of residuals. Residuals vs leverage show standardized residuals on the y-axis, leverage on x-axis, and Cooke's distance represented by dotted lines. Used to check how influential outliers are.

### Regression

```{r}
# Linear model 
seed_L1 <- lm(nr_seeds ~ treatment + species + total_nr_infl, data = seed_ctwt_subset)

# generalized linear model with Poisson distribution
seedctwt2 <-glm(nr_seeds ~ treatment + species + total_nr_infl, data = seed_ctwt_subset, family = "poisson")
seedctwt2.a <- glm(nr_seeds ~ treatment + species + total_nr_infl, data = seed_ctwt_subset, family = "poisson")

# generalized linear model with negative binomial distribution
seedctwt3 <- glm.nb(nr_seeds ~ treatment + species + total_nr_infl, data = seed_ctwt_subset)

```

```{r}
#using function model.sel , to decide what distribution to use
MuMIn::model.sel(seed_L1,seedctwt2, seedctwt3)
```

### Going to to use Generalized Linear Model with negative binomial distribution

```{r}
# generalized linear model with negative binomial distribution
seedctwt3 <- glm.nb(nr_seeds ~ treatment + species + total_nr_infl, data = seed_ctwt_subset)
```

```{r}
# visual of a generalized linear model with negative binomial distribution
plot(simulateResiduals(seedctwt3))
```

**Figure 5.** DHARMa Residuals

Displays QQ plot residuals (left) that discover deviations from the expected distribution. Residuals vs predicted shows plot of residuals against predicted value. The red line shows pattern of residuals.

```{r}
#summary of GLM
summary(seedctwt3)
```

```{r}
# visually exploring 
ggplot()+ 
  geom_jitter(data = seed_ctwt_subset, aes(x = treatment, y = nr_seeds, color = treatment))+ 
  geom_boxplot(data = seed_ctwt_subset, aes(x = treatment, y = nr_seeds))+
  ylim(0,125)+
  labs(y = "seed count", x = "Number of inflorescences", title = "treatmentshrub plot")+
  theme_classic()
#there was an outlier at y-axis of 180 
```

**Figure 6.**

```{r}
# model object in table
seedctwt3 %>% 
  as_flextable()
```

```{r}
#confidence interval
confint(seedctwt3)
```

```{r}
#creating a new dataframe to predict values for all levels 
predictions <- ggpredict(seedctwt3, terms = c("total_nr_infl","treatment", "species")) %>% 
  
  rename(treatment = group,
         species = facet)
# creating plot with predicitons and seed_ctwt_subset
ggplot(seed_ctwt_subset, aes(x = total_nr_infl , y = nr_seeds, fill = treatment)) + #might need to change fill variable
  
  geom_point(aes(color = treatment), alpha = 0.5) +
  
  facet_wrap(~species, scales = "free_y") + 
  
  geom_line(data = predictions, aes(x = x, y = predicted, color = treatment)) + #get error, i think it has to due with predicted 
  
  geom_ribbon(data = predictions, aes(x = x, y = predicted, ymin = conf.low, ymax= conf.high, fill = treatment), alpha = 0.2) + #same as above
  
  scale_fill_manual(values = c("shrub" = "blue", "control" = "orange"))+
  
  scale_color_manual(values = c("shrub" = "blue", "control" = "orange"))+
  
  theme_bw()+
  
  labs(y = "seed count", x = "Number of inflorescences")+
  
  facet_wrap(~species, scales = "free_y")+ 
  
  labs(fill = "treatment", color = "treatment", title = "Seed Count by Plant Species") +
  #used function to visually see better 
  scale_y_continuous(limits = c(0, 100)) +
  #used function to visually see better 
  scale_x_continuous(limits = c(0, 65))
```

**Figure 7.**

Each plot demonstrates a plant species, with a total of six plots. The x-axis demonstrates the total number of inflorescence.The y-axis represents seed count. The yellow color represents the control/ open treatment and the blue color represents shrub treatment. Both yellow and blue shaded areas represent the confidence interval of the generalized linear model. The yellow and blue lines demonstrate trends of the predictor variables.

# Results Problem #2

We used a generalized linear model with a negative binomial distribution to test the predictor variables: plant species, plot type and total number of inflorescences and the independent variable of seed count. The p-value for the predictor variable treatment was 0.0161 and the p-value for the total number of inflorescences was \<0.001. The Pearson correlation between seed count and total number of inflorescences was +0.95. After running a summary function, the treatmentshrub estimation was -0.347 and had a p-value of 0.0161. Figure 6 visually demonstrates the -0.347 is statistically significant, in such that shrub plots have less seed counts than open (control) plots. Lastly, figure 7 visually demonstrates how seed counts vary by each species. 

Biologically, this suggests that plot types, total number of inflorescences and certain plant species demonstrates seed count vary.

# References
